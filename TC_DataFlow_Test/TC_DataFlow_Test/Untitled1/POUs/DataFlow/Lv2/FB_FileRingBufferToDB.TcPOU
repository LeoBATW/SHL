<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_FileRingBufferToDB" Id="{5407df28-5241-4688-9419-685e8c9548d2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FileRingBufferToDB
VAR_INPUT
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
	dataType:DINT;
END_VAR
VAR_IN_OUT
	NovRamData:ST_NovRam;
END_VAR
VAR
	fbDataUpload_Leo:FB_DataUpload_Leo;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbDataUpload_Leo();

IF dataType = E_DB_StructureType.AlarmHistory THEN
	M_AlarmHistory(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.ProductionHistory THEN
	M_ProductionHistory(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.ProductionReport THEN
	M_ProductionReport(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.ProductionSummary THEN
	M_ProductionSummary(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.SoDuration THEN
	M_SoDuration(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.StopCount THEN
	M_StopCount(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
ELSIF dataType = E_DB_StructureType.RegularCheckResults THEN
	M_RegularCheckResults(udiNovRam_BufferIndex:=udiNovRam_BufferIndex,udiFile_Index:=udiFile_Index);
END_IF

]]></ST>
    </Implementation>
    <Folder Name="Sub" Id="{99009e46-9b2f-446b-9e3c-ddc566aff4a9}" />
    <Method Name="M_AlarmHistory" Id="{ff77384c-01f1-48bd-a1b3-7abc9b26720b}">
      <Declaration><![CDATA[METHOD M_AlarmHistory : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.AlarmHistory]-1] OF ST_AlarmInfo_DB_save;//small
	DataToDB:ST_AlarmInfo_DB;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.AlarmHistory], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbAlarmHistory_DB		: FB_AlarmHistory_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.AlarmHistory;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);
//DB_Test
fbAlarmHistory_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
		
		//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_AlarmHistory_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_AlarmInfo_DB_save);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_AlarmInfo_DB_save));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
	
		IF fbDataUpload_Leo.M_AlarmHistory_Upload(stAlarmInfo:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbAlarmHistory_DB.M_Upload(stAlarmInfo:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
	
		IF NOT fbDataUpload_Leo.AlarmHistoryUpload_Err AND fbDataUpload_Leo.AlarmHistoryUpload_Done THEN
		//IF NOT fbAlarmHistory_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
		
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
	
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetFileName" Id="{4b3fabe7-1e25-46e4-9798-bee9befa9ab6}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_GetFileName : STRING(255)
VAR_INPUT
	structureType:DINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR
	tempString:STRING(255);
	tempString2:STRING(255);
	tempFileNo:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF structureType=E_DB_StructureType.AlarmHistory THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'AlarmHistory');
ELSIF structureType=E_DB_StructureType.ProductionHistory THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'ProductionHistory');
ELSIF structureType=E_DB_StructureType.ProductionReport THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'ProductionReport');
ELSIF structureType=E_DB_StructureType.ProductionSummary THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'ProductionSummary');
ELSIF structureType=E_DB_StructureType.SoDuration THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'SoDuration');
ELSIF structureType=E_DB_StructureType.StopCount THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'StopCount');
ELSIF structureType=E_DB_StructureType.RegularCheckResults THEN
	tempString:=CONCAT(gvl.arrfileFolder[structureType],'RegularCheckResults');
END_IF

tempFileNo:=(udiNovRam_BufferIndex) * GVL.FileRingBufferRatio + (udiFile_Index + 1);
tempString2:=CONCAT(tempString,UDINT_TO_STRING(tempFileNo));
M_GetFileName:=CONCAT(tempString2,'.dat');]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProductionHistory" Id="{8fa7d530-7099-445c-bf55-d19dcfd86a46}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_ProductionHistory : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.ProductionHistory]-1] OF ST_PHI_GroupData_DB;//small
	DataToDB:ST_PHI_GroupData_DB;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.ProductionHistory], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	
	//DB
	fbProductionHistoryInspection_DB		: FB_ProductionHistoryInspection_DB;
	
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.ProductionHistory;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);
//DB_Test
fbProductionHistoryInspection_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
	
	//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
					
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_ProductionHistory_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_PHI_GroupData_DB);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_PHI_GroupData_DB));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
	
		IF fbDataUpload_Leo.M_ProductionHistory_Upload(stPHI:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbProductionHistoryInspection_DB.M_Upload(stPHI:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
		
		IF NOT fbDataUpload_Leo.ProductionHistoryUpload_Err AND fbDataUpload_Leo.ProductionHistoryUpload_Done THEN
		//IF NOT fbProductionHistoryInspection_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
		
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
		
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProductionReport" Id="{50ec54d4-867e-4233-ac7e-27f8467d1362}">
      <Declaration><![CDATA[METHOD M_ProductionReport : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.ProductionReport]-1] OF ST_OEE_ProductionReport;//small
	DataToDB:ST_OEE_ProductionReport;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.ProductionReport], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbOEE_ProductionReport_DB:FB_OEE_ProductionReport_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.ProductionReport;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);

//DB_Test
fbOEE_ProductionReport_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
	
	//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_ProductionReport_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_OEE_ProductionReport);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_OEE_ProductionReport));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
		
		IF fbDataUpload_Leo.M_ProductionReport_Upload(stProductionReport:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbOEE_ProductionReport_DB.M_Upload(stOeeProductionReport:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
		
		IF NOT fbDataUpload_Leo.ProductionReportUpload_Err AND fbDataUpload_Leo.ProductionReportUpload_Done THEN
		//IF NOT fbOEE_ProductionReport_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
	
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
		
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProductionSummary" Id="{cc4bac99-b6fb-4a33-86fa-fb65566bf866}">
      <Declaration><![CDATA[METHOD M_ProductionSummary : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.ProductionSummary]-1] OF ST_OEE_ProductionSummary;//small
	DataToDB:ST_OEE_ProductionSummary;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.ProductionSummary], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbOEE_ProductionSummary_DB:FB_OEE_ProductionSummary_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.ProductionSummary;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);
//DB_Test
fbOEE_ProductionSummary_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
	
	//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_ProductionSummary_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_OEE_ProductionSummary);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_OEE_ProductionSummary));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
	
		IF fbDataUpload_Leo.M_ProductionSummary_Upload(stOEE_ProductionSummary:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbOEE_ProductionSummary_DB.M_Upload(stOEEProductionSummary:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
		
		IF NOT fbDataUpload_Leo.ProductionSummaryUpload_Err AND fbDataUpload_Leo.ProductionSummaryUpload_Done THEN
		//IF NOT fbOEE_ProductionSummary_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
	
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
	
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_RegularCheckResults" Id="{c1a33c14-6851-44f5-b745-cb1a1bc9c7c4}">
      <Declaration><![CDATA[METHOD M_RegularCheckResults : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.RegularCheckResults]-1] OF ST_RegularCheck_Results;//small
	DataToDB:ST_RegularCheck_Results;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.RegularCheckResults], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbRegular_Check_Results_DB:FB_Regular_Check_Results_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.RegularCheckResults;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);

//DB_Test
fbRegular_Check_Results_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
	
		//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_RegularCheckResults_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_RegularCheck_Results);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_RegularCheck_Results));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
	
		IF fbDataUpload_Leo.M_RegularCheckResults_Upload(stRegularCheck_Results:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbRegular_Check_Results_DB.M_Upload(stRcResults:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
	
		IF NOT fbDataUpload_Leo.RegularCheckResultsUpload_Err AND fbDataUpload_Leo.RegularCheckResultsUpload_Done THEN
		//IF NOT fbRegular_Check_Results_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		ELSE//write failed need to write to log
			;
		END_IF
		
	330://Check if all data in array Analized
	
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
		
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SoDuration" Id="{56393071-2555-404b-aac1-71b9d39a0087}">
      <Declaration><![CDATA[METHOD M_SoDuration : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.SoDuration]-1] OF ST_SoDuration;//small
	DataToDB:ST_SoDuration;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.ProductionSummary], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbSoDuration_DB:FB_SoDuration_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.SoDuration;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);

//DB_Test
fbSoDuration_DB(udiDBID:=1);

TransTrig(PT:=T#20S);		
	
CASE iStep OF
	0://check if file full 
	
		//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_SoDuration_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_SoDuration);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_SoDuration));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
	
		IF fbDataUpload_Leo.M_SoDuration_Upload(stSoDuration:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbSoDuration_DB.M_Upload(stSoDuration:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
		
		IF NOT fbDataUpload_Leo.SoDurationUpload_Err AND fbDataUpload_Leo.SoDurationUpload_Done THEN
		//IF NOT fbSoDuration_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
		
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
	
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_AlarmHistory_Extract" Id="{5b8cd87c-96ee-4037-a202-d74d22085ccd}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_AlarmHistory_Extract : BOOL
VAR_INPUT
	Input:ST_AlarmInfo_DB_save;
END_VAR
VAR_OUTPUT
	Output:ST_AlarmInfo_DB;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output.lrTime_ms:=Input.lrTime_ms;
Output.iMsgProc:=Input.iMsgProc;
Output.iStateAfter:=Input.iStateAfter;
Output.iMsgClass:=Input.iMsgClass;
Output.diMsgNumber:=Input.diMsgNumber;
Output.sTimeString:=Input.sTimeString;
Output.wsMsgText:=Input.wsMsgText;
Output.sPLC:=Input.sPLC;
Output.wsEquipment:=Input.wsEquipment;
Output.sFaam_id:=Input.sFaam_id;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_ProductionHistory_Extract" Id="{68baffc9-f706-47d6-88f8-4abf8842d603}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_ProductionHistory_Extract : BOOL
VAR_INPUT
	Input:ST_PHI_GroupData_DB;
END_VAR
VAR_OUTPUT
	Output:ST_PHI_GroupData_DB;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_ProductionReport_Extract" Id="{af148257-03fa-4365-8a2d-22bdd2769cf2}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_ProductionReport_Extract : BOOL
VAR_INPUT
	Input:ST_OEE_ProductionReport;
END_VAR
VAR_OUTPUT
	Output:ST_OEE_ProductionReport;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_ProductionSummary_Extract" Id="{b22ff7b2-fb36-43d4-a8ad-c66ee5dbbec5}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_ProductionSummary_Extract : BOOL
VAR_INPUT
	Input:ST_OEE_ProductionSummary;
END_VAR
VAR_OUTPUT
	Output:ST_OEE_ProductionSummary;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_RegularCheckResults_Extract" Id="{01020571-a260-43f0-9306-9b35a4d8ba81}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_RegularCheckResults_Extract : BOOL
VAR_INPUT
	Input:ST_RegularCheck_Results;
END_VAR
VAR_OUTPUT
	Output:ST_RegularCheck_Results;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
Output.diStation_number:=Input.diStation_number;
Output.diTrack_number:=Input.diTrack_number;
Output.dtStart_time:=Input.dtStart_time;

IF Input.eSensor = E_RegularCheckSensorResult.Pass THEN
	Output.bSensor:=TRUE;
ELSE
	Output.bSensor:=FALSE;
END_IF

IF Input.eCamera = E_RegularCheckSensorResult.Pass THEN
	Output.bCamera:=TRUE;
ELSE
	Output.bCamera:=FALSE;
END_IF

IF Input.eLoadcell = E_RegularCheckSensorResult.Pass THEN
	Output.bLoadcell:=TRUE;
ELSE
	Output.bLoadcell:=FALSE;
END_IF

IF Input.eSensor2 = E_RegularCheckSensorResult.Pass THEN
	Output.bSensor2:=TRUE;
ELSE
	Output.bSensor2:=FALSE;
END_IF

Output.diRegular_check_id:=Input.diRegular_check_id;
Output.sFaam_id:=Input.sFaam_id;
Output.sSo_number:=Input.sSo_number;
Output.diSo_id:=Input.diSo_id;
Output.wsEmployee_name_logged_in:=Input.wsEmployee_name_logged_in;
*)
Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_SoDuration_Extract" Id="{041093b7-486b-4764-8273-d6a2053f8837}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_SoDuration_Extract : BOOL
VAR_INPUT
	Input:ST_SoDuration;
END_VAR
VAR_OUTPUT
	Output:ST_SoDuration;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ST_StopCount_Extract" Id="{a101ea81-d579-4034-acb4-b6adc3e24537}" FolderPath="Sub\">
      <Declaration><![CDATA[METHOD M_ST_StopCount_Extract : BOOL
VAR_INPUT
	Input:ST_StopCount;
END_VAR
VAR_OUTPUT
	Output:ST_StopCount;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Output:=Input;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCount" Id="{ce4c351f-2ecd-476b-900a-3eebce8b4087}">
      <Declaration><![CDATA[METHOD M_StopCount : BOOL
VAR_INPUT
	
	//udiFileNo:UDINT;
	udiNovRam_BufferIndex:UDINT;
	udiFile_Index:UDINT;
END_VAR
VAR_INST
	arrDataFromFile:ARRAY[0..GVL.arrArrayLength[E_DB_StructureType.StopCount]-1] OF ST_StopCount;//small
	DataToDB:ST_StopCount;//large
	AnalizeIndex:UDINT;//should be kept by NovRam
	iStep:INT;
	i:UDINT;
	fbFileRingBuffer: FB_FileRingBuffer := ( sNetId     := '',
                                             sPathName  := '',
                                             ePath      := PATH_GENERIC,
                                             nID        := 1,
                                             cbBuffer   := gvl.arrFileRingBufferSize[E_DB_StructureType.StopCount], //5MB(5*10^6Bytes)
                                             bOverwrite := FALSE,
                                             pWriteBuff := 0,
                                             cbWriteLen := 0,
                                             pReadBuff  := 0,
                                             cbReadLen  := 0,
                                             tTimeout   := T#1S );
	bBusy:BOOL;
	bError:BOOL;
	nErrID:UDINT;
	stHeader:ST_FileRBufferHead;
    //loadData  : ARRAY[0..511] OF BYTE :=[512(0)];
    //cbLoad    : UDINT;
	
	fileName: STRING(255);
	eStrIndex:DINT;
	fbStopCount_DB:FB_StopCount_DB;
	
	//1217
	TransTrig:TON;
	tempFileIndex:UDINT;
	udiDataCount:UDINT;
	lrTemp:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Config
eStrIndex:=E_DB_StructureType.StopCount;

fbFileRingBuffer(sPathName:=fileName
				,bBusy=>bBusy,bError=>bError,nErrID=>nErrID
				,stHeader=>stHeader);
//DB_Test
fbStopCount_DB(udiDBID:=1);

TransTrig(PT:=T#20S);

CASE iStep OF
	0://check if file full 
	
		//1217
		tempFileIndex:=NovRamData.arrFileRingBuffer_Status[eStrIndex].nowFileIndex[udiNovRam_BufferIndex];
		IF tempFileIndex = udiFile_Index//now writen file index = myself file index
		AND NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = FALSE THEN//file not full
			TransTrig(IN:=TRUE);
			
			IF TransTrig.Q THEN//timeout
				TransTrig(in:=FALSE);
				
				//force to be full
				NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] := TRUE;
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
				
			END_IF
		ELSE
			IF NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index] = TRUE//file full = should work 
			THEN
				//1217
				TransTrig(in:=FALSE);
				
				fileName:=M_GetFileName(structureType:=eStrIndex
										,udiNovRam_BufferIndex:=udiNovRam_BufferIndex
										,udiFile_Index:=udiFile_Index);
				
				iStep:=100;
			END_IF
		END_IF
		
	100:// Open file
		
		AnalizeIndex:=0;
		fbFileRingBuffer.A_Open();
		
		iStep:=200;
	200://wait done / read head
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_GetHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
			
			iStep:=300;
		END_IF
	300://wait done / take data from array
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			M_ST_StopCount_Extract(Input:=arrDataFromFile[AnalizeIndex],Output=>DataToDB);
			//DataToDB:=arrDataFromFile[AnalizeIndex];
			
			//1217//get count of data
			lrTemp:=SIZEOF(ST_StopCount);
			udiDataCount:=LREAL_TO_UDINT(fbFileRingBuffer.cbReturn / SIZEOF(ST_StopCount));
			
			iStep:=310;
		ELSIF NOT fbFileRingBuffer.bBusy AND fbFileRingBuffer.bError THEN//Empty
			iStep:=600;
		END_IF
	310:// write to DB
		
		IF fbDataUpload_Leo.M_StopCount_Upload(stStopCount:=DataToDB,bExecute:=TRUE) THEN 
		//IF fbStopCount_DB.M_Upload(stStopCount:=DataToDB) THEN
			iStep:=320;
		END_IF
		
	320://wait done
		
		IF NOT fbDataUpload_Leo.StopCountUpload_Err AND fbDataUpload_Leo.StopCountUpload_Done THEN
		//IF NOT fbStopCount_DB.bError THEN//write OK
		
			AnalizeIndex:=AnalizeIndex+1;
			
			iStep:=330;
			
		END_IF
		
	330://Check if all data in array Analized
	
		//1217
		//IF AnalizeIndex < GVL.arrArrayLength[eStrIndex]-1 THEN//not done
		IF AnalizeIndex < udiDataCount THEN//not done
			iStep:=300;//go back
		ELSE//array data done
			iStep:=400;//complete this array
		END_IF
		
	400://wait done / remove Head
	
		//1217
		//fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := SIZEOF(arrDataFromFile));
		fbFileRingBuffer.A_RemoveHead(pReadBuff := ADR(arrDataFromFile), cbReadLen := fbFileRingBuffer.cbReturn);
		
		iStep:=500;
		
	500://wait done / check if all data got?
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			IF stHeader.nCount > 0 THEN
				iStep:=100;//Go Back
			ELSE
				iStep:=600;//finish
			END_IF
		END_IF
	600://reset file
	
		fbFileRingBuffer.A_Reset();
		
		iStep:=700;
		
	700://wait done / close file
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			fbFileRingBuffer.A_Close();
			
			iStep:=800;
		END_IF
	800://wait done
		IF NOT fbFileRingBuffer.bBusy AND NOT fbFileRingBuffer.bError THEN
			
			NovRamData.arrFileRingBuffer_Status[eStrIndex].bFileFull[udiNovRam_BufferIndex][udiFile_Index]:=FALSE;
			
			iStep:=0;
			
		END_IF
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_FileRingBufferToDB">
      <LineId Id="74" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_AlarmHistory">
      <LineId Id="519" Count="0" />
      <LineId Id="517" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="858" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="898" Count="1" />
      <LineId Id="862" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="877" Count="1" />
      <LineId Id="1030" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="882" Count="3" />
      <LineId Id="881" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="879" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="868" Count="2" />
      <LineId Id="989" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="871" Count="4" />
      <LineId Id="867" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="384" Count="1" />
      <LineId Id="169" Count="2" />
      <LineId Id="51" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="907" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="819" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="784" Count="0" />
      <LineId Id="580" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="468" Count="4" />
      <LineId Id="475" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="891" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="440" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="895" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="81" Count="3" />
      <LineId Id="77" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_GetFileName">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="76" Count="1" />
      <LineId Id="79" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ProductionHistory">
      <LineId Id="186" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="187" Count="2" />
      <LineId Id="185" Count="0" />
      <LineId Id="239" Count="1" />
      <LineId Id="384" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="386" Count="0" />
      <LineId Id="388" Count="1" />
      <LineId Id="430" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="432" Count="1" />
      <LineId Id="431" Count="0" />
      <LineId Id="408" Count="10" />
      <LineId Id="391" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="398" Count="7" />
      <LineId Id="393" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="53" Count="16" />
      <LineId Id="339" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="420" Count="1" />
      <LineId Id="419" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="72" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="235" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="94" Count="4" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="2" />
      <LineId Id="425" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="108" Count="6" />
      <LineId Id="428" Count="0" />
      <LineId Id="115" Count="2" />
      <LineId Id="429" Count="0" />
      <LineId Id="118" Count="31" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ProductionReport">
      <LineId Id="39" Count="5" />
      <LineId Id="310" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="18" />
      <LineId Id="316" Count="0" />
      <LineId Id="338" Count="2" />
      <LineId Id="357" Count="1" />
      <LineId Id="341" Count="4" />
      <LineId Id="337" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="56" Count="17" />
      <LineId Id="269" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="97" Count="4" />
      <LineId Id="104" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="352" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="111" Count="6" />
      <LineId Id="355" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="356" Count="0" />
      <LineId Id="120" Count="32" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ProductionSummary">
      <LineId Id="39" Count="5" />
      <LineId Id="311" Count="0" />
      <LineId Id="313" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="18" />
      <LineId Id="316" Count="0" />
      <LineId Id="338" Count="2" />
      <LineId Id="356" Count="1" />
      <LineId Id="341" Count="4" />
      <LineId Id="337" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="56" Count="16" />
      <LineId Id="269" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="347" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="97" Count="4" />
      <LineId Id="104" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="352" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="111" Count="6" />
      <LineId Id="355" Count="0" />
      <LineId Id="118" Count="34" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_RegularCheckResults">
      <LineId Id="39" Count="5" />
      <LineId Id="386" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="391" Count="0" />
      <LineId Id="393" Count="18" />
      <LineId Id="392" Count="0" />
      <LineId Id="414" Count="2" />
      <LineId Id="434" Count="1" />
      <LineId Id="417" Count="4" />
      <LineId Id="413" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="56" Count="16" />
      <LineId Id="344" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="423" Count="1" />
      <LineId Id="422" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="192" Count="1" />
      <LineId Id="89" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="96" Count="9" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="111" Count="6" />
      <LineId Id="432" Count="0" />
      <LineId Id="118" Count="2" />
      <LineId Id="433" Count="0" />
      <LineId Id="121" Count="31" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_SoDuration">
      <LineId Id="39" Count="5" />
      <LineId Id="308" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="18" />
      <LineId Id="317" Count="0" />
      <LineId Id="339" Count="2" />
      <LineId Id="347" Count="1" />
      <LineId Id="342" Count="4" />
      <LineId Id="338" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="56" Count="16" />
      <LineId Id="267" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="349" Count="1" />
      <LineId Id="74" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="76" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="190" Count="2" />
      <LineId Id="89" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="97" Count="4" />
      <LineId Id="104" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="111" Count="6" />
      <LineId Id="359" Count="0" />
      <LineId Id="118" Count="2" />
      <LineId Id="360" Count="0" />
      <LineId Id="121" Count="31" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_AlarmHistory_Extract">
      <LineId Id="13" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_ProductionHistory_Extract">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_ProductionReport_Extract">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_ProductionSummary_Extract">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_RegularCheckResults_Extract">
      <LineId Id="50" Count="0" />
      <LineId Id="12" Count="31" />
      <LineId Id="5" Count="0" />
      <LineId Id="51" Count="1" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_SoDuration_Extract">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_ST_StopCount_Extract">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileRingBufferToDB.M_StopCount">
      <LineId Id="39" Count="5" />
      <LineId Id="308" Count="3" />
      <LineId Id="45" Count="2" />
      <LineId Id="312" Count="0" />
      <LineId Id="314" Count="18" />
      <LineId Id="313" Count="0" />
      <LineId Id="335" Count="2" />
      <LineId Id="343" Count="1" />
      <LineId Id="338" Count="4" />
      <LineId Id="334" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="56" Count="16" />
      <LineId Id="267" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="346" Count="1" />
      <LineId Id="345" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="97" Count="4" />
      <LineId Id="104" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="111" Count="5" />
      <LineId Id="355" Count="0" />
      <LineId Id="117" Count="2" />
      <LineId Id="354" Count="0" />
      <LineId Id="120" Count="32" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>